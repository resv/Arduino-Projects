function doPost(e) {
    // Parse the incoming request payload
    var params = JSON.parse(e.postData.contents);

    // Log incoming parameters for debugging
    Logger.log(params);

    // Open the active spreadsheet and select the first sheet
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

    // Get the total number of rows currently in the sheet
    var lastRow = sheet.getRange("A:A").getValues().filter(String).length; // Count all rows with data in Column A

    // Shift data in columns A to E down by 1 row
    if (lastRow >= 2) { // Ensure there is data to shift (starting from row 2)
        sheet.getRange(2, 1, lastRow - 1, 5).moveTo(sheet.getRange(3, 1)); // Shift A-E down
    }

    // Write the new data to the top row (row 2) in columns A to E, only if params have valid values
    if (params.clientID) {
        sheet.getRange(2, 1).setValue(params.clientID);          // Column A
    }

    if (params.status) {
        sheet.getRange(2, 2).setValue(params.status);            // Column B
    }

    sheet.getRange(2, 3).setValue(params.armed || "");          // Column C
    sheet.getRange(2, 4).setValue(params.dateTime);            // Column D (use dateTime from payload)
    sheet.getRange(2, 5).setValue(params.additionalMetric || ""); // Column E (optional)

    // Format the 4th column to display full date and time
    sheet.getRange(2, 4).setNumberFormat("MM/dd/yyyy HH:mm:ss");

    // Center-align and middle-align the new row (row 2)
    sheet.getRange(2, 1, 1, 5).setHorizontalAlignment("center").setVerticalAlignment("middle");

    // Handle G4-G6 for "RESV-1ST", "RESV-2ND", "RESV-3RD"
    if (params.status.includes("RESV-1ST") && params.status.includes("CONNECTED")) {
        updateDateCell(sheet, 4, params.dateTime); // G4
    } else if (params.status.includes("RESV-2ND") && params.status.includes("CONNECTED")) {
        updateDateCell(sheet, 5, params.dateTime); // G5
    } else if (params.status.includes("RESV-3RD") && params.status.includes("CONNECTED")) {
        updateDateCell(sheet, 6, params.dateTime); // G6
    }

    // Handle G10-G12 for "RESV-SHOCKERA", "RESV-SHOCKERB", "RESV-SHOCKERC"
    if (params.status.includes("CONNECTED")) {
        if (params.clientID === "RESV-SHOCKERA") {
            updateDateCell(sheet, 10, params.dateTime); // G10
        } else if (params.clientID === "RESV-SHOCKERB") {
            updateDateCell(sheet, 11, params.dateTime); // G11
        } else if (params.clientID === "RESV-SHOCKERC") {
            updateDateCell(sheet, 12, params.dateTime); // G12
        }
    }

    // Handle I10-I12 for "DETECTED SHOCK"
    if (params.status === "DETECTED SHOCK") {
        if (params.clientID === "RESV-SHOCKERA") {
            updateShockCell(sheet, 10, params.dateTime, params.armed); // I10
        } else if (params.clientID === "RESV-SHOCKERB") {
            updateShockCell(sheet, 11, params.dateTime, params.armed); // I11
        } else if (params.clientID === "RESV-SHOCKERC") {
            updateShockCell(sheet, 12, params.dateTime, params.armed); // I12
        }
    }

    // Handle I4-I6 for "REQUESTED ARM" or "REQUESTED DISARM"
    if (params.status.includes("RESV-1ST")) {
        updateRequestCells(sheet, 4, params.status, params.dateTime); // I4
    } else if (params.status.includes("RESV-2ND")) {
        updateRequestCells(sheet, 5, params.status, params.dateTime); // I5
    } else if (params.status.includes("RESV-3RD")) {
        updateRequestCells(sheet, 6, params.status, params.dateTime); // I6
    }

    // Calculate totals for H10, H11, and H12
    calculateShockTotalsByClient(sheet);

    // Apply conditional formatting to the new row
    applyConditionalFormatting(sheet, 2, params);

    // Check if the "EVENT" (Column B) equals "DETECTED SHOCK"
    if (params.status === "DETECTED SHOCK") {
        calculateShockTotals(sheet);
        aggregateMonthlyShocks(sheet);
    }

    // Recalculate and update "Total Time" columns for metrics
    updateTotalTime(sheet);

    // Update the metrics table
    updateMetricsTable(sheet);

    // Return a success response
    return ContentService.createTextOutput("Success").setMimeType(ContentService.MimeType.TEXT);
}


function updateRequestCells(sheet, row, status, dateTime) {
    let formattedDateTime = formatDateTime(dateTime);

    if (status.includes("REQUESTED ARM")) {
        sheet.getRange(row, 8) // Column H
            .setValue("REQUESTED ARM")
            .setBackground("red")
            .setFontColor("white")
            .setHorizontalAlignment("center")
            .setVerticalAlignment("middle");
        sheet.getRange(row, 9) // Column I
            .setValue(formattedDateTime)
            .setNumberFormat("MM/dd HH:mm:ss") // Ensure leading zeros in HH
            .setHorizontalAlignment("center")
            .setVerticalAlignment("middle");
    } else if (status.includes("REQUESTED DISARM")) {
        sheet.getRange(row, 8) // Column H
            .setValue("REQUESTED DISARM")
            .setBackground(null)
            .setFontColor("black")
            .setHorizontalAlignment("center")
            .setVerticalAlignment("middle");
        sheet.getRange(row, 9) // Column I
            .setValue(formattedDateTime)
            .setNumberFormat("MM/dd HH:mm:ss") // Ensure leading zeros in HH
            .setHorizontalAlignment("center")
            .setVerticalAlignment("middle");
    }
}


function updateDateCell(sheet, row, dateTime) {
    let formattedDateTime = formatDateTime(dateTime);

    let cell = sheet.getRange(row, 7); // Column G
    cell.setValue(formattedDateTime)
        .setNumberFormat("MM/dd HH:mm:ss") // Ensure leading zeros in HH
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle");
}

function updateShockCell(sheet, row, dateTime, armedStatus) {
    let formattedDateTime = formatDateTime(dateTime);

    let cell = sheet.getRange(row, 9); // Column I
    cell.setValue(formattedDateTime)
        .setNumberFormat("MM/dd HH:mm:ss") // Ensure leading zeros in HH
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle");

    if (armedStatus === "ARMED") {
        cell.setBackground("red").setFontColor("white");
    } else if (armedStatus === "DISARMED") {
        cell.setBackground(null).setFontColor("black");
    }
}

function formatDateTime(dateTime) {
    let [datePart, timePart] = dateTime.split(" ");
    let [hours, minutes, seconds] = timePart.split(":").map(Number);
    hours = String(hours).padStart(2, "0");
    minutes = String(minutes).padStart(2, "0");
    seconds = String(seconds).padStart(2, "0");
    return `${datePart} ${hours}:${minutes}:${seconds}`;
}
function calculateShockTotalsByClient(sheet) {
    var data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getValues(); // Columns A and B
    var shockeraCount = 0;
    var shockerbCount = 0;
    var shockercCount = 0;

    data.forEach(row => {
        var clientID = row[0];
        var status = row[1];

        if (clientID === "RESV-SHOCKERA" && status === "DETECTED SHOCK") {
            shockeraCount++;
        } else if (clientID === "RESV-SHOCKERB" && status === "DETECTED SHOCK") {
            shockerbCount++;
        } else if (clientID === "RESV-SHOCKERC" && status === "DETECTED SHOCK") {
            shockercCount++;
        }
    });

    // Update totals in H10, H11, and H12
    sheet.getRange(10, 8).setValue(shockeraCount)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle"); // H10
    sheet.getRange(11, 8).setValue(shockerbCount)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle"); // H11
    sheet.getRange(12, 8).setValue(shockercCount)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle"); // H12
}

function applyConditionalFormatting(sheet, row, params) {
    // Check if Column B contains "DETECTED SHOCK"
    if (params.status && params.status.toLowerCase().includes("detected shock")) {
        sheet.getRange(row, 1, 1, 5).setBackground("lightgreen");
    }

    // Check if Column B contains "REQUESTED"
    if (params.status && params.status.toLowerCase().includes("requested")) {
        sheet.getRange(row, 1, 1, 5).setBackground("yellow");
    }

    // Check if Column B contains "CONFIRMED"
    if (params.status && params.status.toLowerCase().includes("confirmed")) {
        sheet.getRange(row, 1, 1, 5).setBackground("orange");
    }

    // Check if Column B contains "CONNECTED"
    if (params.status && params.status.toLowerCase().includes("connected")) {
        sheet.getRange(row, 1, 1, 5).setBackground("cyan");
    }

    // Apply specific formatting to the "Armed" status column (Column C)
    if (params.armed === "ARMED") {
        sheet.getRange(row, 3)
            .setBackground("red")
            .setFontColor("white");
    } else if (params.armed === "DISARMED") {
        sheet.getRange(row, 3)
            .setBackground("white")
            .setFontColor("black");
    }
}

function calculateShockTotals(sheet) {
    var data = sheet.getRange(2, 2, sheet.getLastRow() - 1, 2).getValues(); // Columns B and C
    var overallCount = 0;
    var disarmedCount = 0;
    var armedCount = 0;

    data.forEach(row => {
        var status = row[0];
        var armedStatus = row[1];

        if (status === "DETECTED SHOCK") {
            overallCount++;
            if (armedStatus === "DISARMED") {
                disarmedCount++;
            } else if (armedStatus === "ARMED") {
                armedCount++;
            }
        }
    });

    // Update overall, disarmed, and armed counts
    sheet.getRange(17, 8).setValue(overallCount)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle"); // H17
    sheet.getRange(19, 8).setValue(disarmedCount)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle"); // H19
    sheet.getRange(21, 8).setValue(armedCount)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle"); // H21
}

function aggregateMonthlyShocks(sheet) {
    var data = sheet.getDataRange().getValues(); // Get all data in the sheet
    var monthlyCounts = Array(12).fill(0);       // Array to hold counts for each month

    for (var i = 1; i < data.length; i++) { // Skip header row
        var dateCell = data[i][3]; // Column D contains the date
        var statusCell = data[i][1]; // Column B contains the status

        if (dateCell && statusCell === "DETECTED SHOCK") {
            var entryDate = new Date(dateCell);
            var month = entryDate.getMonth(); // Get the month (0 = January, 11 = December)
            monthlyCounts[month]++;
        }
    }

    // Update monthly totals and times for January (H24, I24) to December (H35, I35)
    for (var month = 0; month < 12; month++) {
        var countCell = sheet.getRange(24 + month, 8); // H24 to H35
        var timeCell = sheet.getRange(24 + month, 9); // I24 to I35

        countCell.setValue(monthlyCounts[month]);

        // Convert counts to time format and update
        var totalSeconds = monthlyCounts[month] * 4; // 4 seconds per detected shock
        var timeString = convertSecondsToTime(totalSeconds);
        timeCell.setValue(timeString);

        // Explicitly set the format to text to preserve the HH:MM:SS format
        timeCell.setNumberFormat("@STRING@");
    }
}

function updateTotalTime(sheet) {
    const metrics = [
        { row: 17, column: 8, totalCell: "I17" }, // Overall shocks
        { row: 19, column: 8, totalCell: "I19" }, // Disarmed shocks
        { row: 21, column: 8, totalCell: "I21" }  // Armed shocks
    ];

    metrics.forEach(metric => {
        const count = sheet.getRange(metric.row, metric.column).getValue() || 0; // Get current count
        const totalSeconds = count * 4; // Convert count to seconds
        const timeString = convertSecondsToTime(totalSeconds);
        const timeCell = sheet.getRange(metric.totalCell);
        timeCell.setValue(timeString); // Update total time cell
        timeCell.setNumberFormat("@STRING@"); // Ensure the value is treated as plain text
    });
}

function convertSecondsToTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const remainingSeconds = seconds % 60;

    // Format as HH:MM:SS with leading zeros
    return (
        String(hours).padStart(2, '0') + ":" +
        String(minutes).padStart(2, '0') + ":" +
        String(remainingSeconds).padStart(2, '0')
    );
}
